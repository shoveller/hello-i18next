import {GoogleSpreadsheet} from 'google-spreadsheet';
import {JWT} from 'google-auth-library';
import {createRequire} from 'module';

const require = createRequire(import.meta.url);

/**
 * 로드가 끝난 스프레드시트를 반환한다
 * @param {string} spreadsheetDocId
 * @param {string} sheetId
 * @param {string} client_email
 * @param {string} private_key
 * @returns {Promise<GoogleSpreadsheet>}
 */
export async function getDocument({spreadsheetDocId = '', sheetId = '', client_email = '', private_key = ''} = {}) {
    console.info(
        '\u001B[32m',
        '=====================================================================================================================\n',
        // "# i18next auto-sync using Spreadsheet\n\n",
        // "  * Download translation resources from Spreadsheet and make /assets/locales/{{lng}}/{{ns}}.json\n",
        // "  * Upload translation resources to Spreadsheet.\n\n",
        `The Spreadsheet for translation is here (\u001B[34mhttps://docs.google.com/spreadsheets/d/${spreadsheetDocId}/#gid=${sheetId}\u001B[32m)\n`,
        '=====================================================================================================================',
        '\u001B[0m',
    );
    const auth = new JWT({
        // env var values here are copied from service account credentials generated by google
        // see "Authentication" section in docs for more info
        email: client_email.replace(/\\n/g, "\n"),
        key: private_key.replace(/\\n/g, "\n"),
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
    });

    // spreadsheet key is the long id in the sheets URL
    const doc = new GoogleSpreadsheet(spreadsheetDocId, auth);

    await doc.loadInfo(); // loads document properties and worksheets

    return doc;
}

/**
 * 스프레드 시트 속 시트에 쓴다.
 * @param {string} title
 * @param {GoogleSpreadsheet} doc
 * @param {{ key: string, value: string }} records
 * @returns {Promise<boolean>}
 */
export const write = async ({title, doc, records} = {}) => {
    try {
        const sheet = doc.sheetsByTitle[title]
        const rows = await sheet.getRows();

        // 모든 행 삭제
        for (let row of rows) {
            await row.delete(); // 행 삭제
        }
        console.log(`remove all rows from ${title}`);

        // 개발환경의 목록을 기록
        for (let record of records) {
            await sheet.addRow(record);
        }
        console.log(`write all rows from records to ${title}`);

        return true
    } catch (e) {
        return false
    }
}

/**
 * 객체를 { key: string, value: string } 스타일의 객체 배열로 변환
 * @param {Record<string, string>} object - 변환할 객체. 문자열 키와 문자열 값의 쌍을 가집니다.
 * @returns {Array<{ key: string, value: string }>} - { key, value } 형태의 객체 배열.
 */
const obj2Records = (object) => {
    const keys = Object.keys(object)

    return keys.reduce((sum, key) => {
        return [...sum, { key, value: object[key] }]
    }, [])
}

/**
 * 번역물을 업로드 한다
 * @param {GoogleSpreadsheet} doc
 * @returns {Promise<boolean>}
 */
export const upload = async ({doc} = {}) => {
    return await Promise.all([
        await write({
            title: 'ko',
            doc,
            records: obj2Records(require('../public/locales/ko/translation.json'))
        }),
        await write({
            title: 'en',
            doc,
            records: obj2Records(require('../public/locales/en/translation.json'))
        }),
        await write({
            title: 'ja',
            doc,
            records: obj2Records(require('../public/locales/ja/translation.json'))
        }),
        await write({
            title: 'zh',
            doc,
            records: obj2Records(require('../public/locales/zh/translation.json'))
        })
    ]).then(res => res.includes(false))
}
